/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.celylog.curam.web.controller;

import com.celylog.curam.model.entities.DroitProfil;
import com.celylog.curam.model.entities.Menus;
import com.celylog.curam.model.entities.Profil;
import javax.servlet.http.HttpServletRequest;
import com.celylog.curam.service.DefaultService;
import com.celylog.curam.service.security.FormService;
import com.celylog.curam.service.security.UserService;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

/**
 *
 * @author Sergeo T
 */
@Controller
public class ProfilController {
    private static final Logger logger = Logger.getLogger(UtilisateurController.class.getName());

    @Autowired
    UserService userservice;
    @Autowired
    DefaultService service;
    @Autowired
    FormService formService;
    @Autowired
    DefaultService dao;

    @RequestMapping(value = {"/chooseprofil"}, method = RequestMethod.GET)
    public String homchooseprofile(@RequestParam(value = "message", required = false) String message,
            Model m, HttpSession session) {
        return "chooseprofil";
    }

    @RequestMapping(value = {"/chooseprofil"}, method = RequestMethod.POST)
    public String chooseprofile(@RequestParam(value = "profil", required = false) int idProfil,
            Model m,HttpServletRequest request, HttpSession session) {
        userservice.setUserProfilSessionMenus(userservice.getSessionUser(session), idProfil, session);
        return "redirect:/home";
    }

    @RequestMapping(value = {"/listprofils"}, method = RequestMethod.GET)
    public String adminProfil(
            HttpServletRequest request, HttpSession session) {
        userservice.setAminProfilSession(request,session);
        try{
            userservice.setAdminProfilSubMenu(request,session);
        }catch(IllegalStateException ie){
            System.err.println(""+ie.toString());
        }
        
        return "listprofils";
    }

    @RequestMapping(value = {"/newProfil"}, method = RequestMethod.POST)
    public String adminProfilAdd(
            HttpServletRequest request, HttpSession session) {
        try {
            Object o = formService.add(request, session,"Profil", false);
            Profil profil = (Profil) o;
            String dateActivation = request.getParameter("dateActivation");
            dateActivation+=" 00:00:00";
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yy hh:mm:ss");
            Date date = sdf.parse(dateActivation);
            profil.setDateActivation(date);
            dao.create(profil);
        } catch (Exception ex) {
            Logger.getLogger(ProfilController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "redirect:/listprofils";
    }
    
    @RequestMapping(value = {"/configprofil"}, method = RequestMethod.GET)
    public String adminProfilConf(
            HttpServletRequest request, HttpSession session) {
        Integer idProfil =0;
        try{
            idProfil = Integer.parseInt(request.getParameter("id"));
            Profil p = (Profil)dao.getById(idProfil.intValue(), Profil.class);
        // on recupere tout les menus de niveau 1
        String qwery ="select m from Menus m where m.parent =0 and m.id>0";
        
        List<Menus> menus = (ArrayList<Menus>)dao.getAll(qwery);
        request.setAttribute("cMenus", menus);
        request.setAttribute("cProfil", p);
        // on transmet les drois actuels de l'utilisateur dans la page
        Map drtoisProfil = new HashMap(); 
        for(DroitProfil dp:p.getDroits()){
            drtoisProfil.putIfAbsent(dp.getRubrique().getId(), dp);
        }
        request.setAttribute("cDroits", drtoisProfil);
                
        }catch(Exception ex){
            Logger.getLogger(ProfilController.class.getName()).log(Level.SEVERE, null, ex);
        }      
        
        return "confProfil";
    }
    
    @RequestMapping(value = {"/configprofil"}, method = RequestMethod.POST)
    public String adminProfilConfig(
            HttpServletRequest request, HttpSession session) {
        Integer idProfil =0;
        
        try {
            Map<String, String[]> mapParameters = request.getParameterMap();
            
            boolean b = mapParameters.isEmpty();
            if(!b)
                idProfil = Integer.parseInt(mapParameters.get("profilId")[0]);
            else
                return "404";
            
            Profil p = (Profil)dao.getById(idProfil.intValue(), Profil.class);
            List<DroitProfil> dps = new ArrayList<DroitProfil>();
//            dps = p.getDroits();
//            for(DroitProfil dp:dps){
//                dao.deleteById(dp.getId(), DroitProfil.class);
//            }
//            
//            dps.clear();
            
            for (int i = 1; i < mapParameters.size(); i++) {
                String cle = "droit-"+i;
                String dValues[] = mapParameters.get(cle);
                if(dValues.length>1){
                    DroitProfil d = new DroitProfil();
                    d.setProfil(p);
                    int idMenu = Integer.parseInt(dValues[0]);
                    Menus m = (Menus)dao.getById(idMenu, Menus.class);
                    d.setRubrique(m);
                    for (int j = 1; j < dValues.length; j++) {
                        String dValue = dValues[j];
                        if(dValue.compareToIgnoreCase("cst")==0){
                            d.setConsulter(true);
                        }else
                            if(dValue.compareToIgnoreCase("crt")==0){
                                d.setCreer(true);
                            }else
                                if(dValue.compareToIgnoreCase("mdf")==0){
                                    d.setModifier(true);
                                }else
                                    if(dValue.compareToIgnoreCase("dlt")==0)
                                        d.setSupprimer(true);                        
                    }
                    dps.add(d);
                }                    
                
            }
            
            p.setDroits(dps);
            // essayons de mettre en base de donnees les informations receuillies
            p.setActive(1);
            p.setVersion(1);
            dao.update(p);
            System.out.println("Youpiii c'est fait");
            
        } catch (Exception e) {
            
            logger.log(Level.SEVERE, "Proble lors de l'ajout des droits à {0} causé par {1}", e.getMessage());
        }
        
        return "redirect:/listprofils";
    }
}
