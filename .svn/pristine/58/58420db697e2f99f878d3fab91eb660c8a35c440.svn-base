/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.celylog.curam.model.entities;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;

/**
 *
 * @author xavalex
 */
@Entity
@Table(name = "requete")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Requete.findAll", query = "SELECT r FROM Requete r"),
    @NamedQuery(name = "Requete.findById", query = "SELECT r FROM Requete r WHERE r.id = :id"),
    @NamedQuery(name = "Requete.findByTypeRequete", query = "SELECT r FROM Requete r WHERE r.typeRequete = :typeRequete"),
    @NamedQuery(name = "Requete.findByIdDestinataire", query = "SELECT r FROM Requete r WHERE r.idDestinataire = :idDestinataire"),
    @NamedQuery(name = "Requete.findByMotif", query = "SELECT r FROM Requete r WHERE r.motif = :motif"),
    @NamedQuery(name = "Requete.findByDescription", query = "SELECT r FROM Requete r WHERE r.description = :description"),
    @NamedQuery(name = "Requete.findByMontant", query = "SELECT r FROM Requete r WHERE r.montant = :montant"),
    @NamedQuery(name = "Requete.findByStatut", query = "SELECT r FROM Requete r WHERE r.statut = :statut"),
    @NamedQuery(name = "Requete.findByActive", query = "SELECT r FROM Requete r WHERE r.active = :active"),
    @NamedQuery(name = "Requete.findByVersion", query = "SELECT r FROM Requete r WHERE r.version = :version"),
    @NamedQuery(name = "Requete.findBySignature", query = "SELECT r FROM Requete r WHERE r.signature = :signature"),
    @NamedQuery(name = "Requete.findByDateActivation", query = "SELECT r FROM Requete r WHERE r.dateActivation = :dateActivation"),
    @NamedQuery(name = "Requete.findByDateFermeture", query = "SELECT r FROM Requete r WHERE r.dateFermeture = :dateFermeture"),
    @NamedQuery(name = "Requete.findByDateModification", query = "SELECT r FROM Requete r WHERE r.dateModification = :dateModification"),
    @NamedQuery(name = "Requete.findByDateCreation", query = "SELECT r FROM Requete r WHERE r.dateCreation = :dateCreation")})
public class Requete implements Serializable {
    public static final int TYPE_REMBOURSSEMENT = 1;
    public static final int TYPE_RECLAMATION = 2;
    
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Column(name = "id")
    private Integer id;
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "id_utilisateur")
    private Utilisateur utilisateur;
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "id_beneficiaire")
    private Beneficiaire beneficiaire;
    @Column(name = "type_requete")
    private Integer typeRequete;
    @Column(name = "id_destinataire")
    private Integer idDestinataire;
    @Column(name = "motif")
    private Integer motif;
    @Size(max = 254)
    @Column(name = "description")
    private String description;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Column(name = "montant")
    private Double montant;
    @Column(name = "statut")
    private Integer statut;
    @OneToOne(cascade = CascadeType.DETACH, fetch = FetchType.EAGER)
    @JoinColumn(name = "id_etat",insertable = false, updatable = false)
    private Etat etat;
    @Column(name = "active")
    private Integer active;
    @Column(name = "version")
    private Integer version;
    @Size(max = 20)
    @Column(name = "signature")
    private String signature;
    @Column(name = "date_activation")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateActivation;
    @Column(name = "date_fermeture")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateFermeture;
    @Column(name = "date_modification")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateModification;
    @Column(name = "date_creation")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateCreation;
    
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "id_parent")
    private List<Requete> reclamations = new ArrayList<Requete>(0);
    
    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.REMOVE, CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
    @JoinTable(name = "documentsrequete", joinColumns = {@JoinColumn (name="id_requete")}, inverseJoinColumns ={ @JoinColumn (name="id_document")})
    private List<Document> documents = new ArrayList<Document>(0);

    public Requete() {
    }

    public Requete(Integer id) {
        this.id = id;
    }

    public Requete(int type) {
        this.typeRequete = type;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Utilisateur getUtilisateur() {
        return utilisateur;
    }

    public void setUtilisateur(Utilisateur utilisateur) {
        this.utilisateur = utilisateur;
    }
       
    public Integer getTypeRequete() {
        return typeRequete;
    }

    public Beneficiaire getBeneficiaire() {
        return beneficiaire;
    }

    public void setBeneficiaire(Beneficiaire beneficiaire) {
        this.beneficiaire = beneficiaire;
    }    
    
    public void setTypeRequete(Integer typeRequete) {
        this.typeRequete = typeRequete;
    }

    public Integer getIdDestinataire() {
        return idDestinataire;
    }

    public void setIdDestinataire(Integer idDestinataire) {
        this.idDestinataire = idDestinataire;
    }

    public Integer getMotif() {
        return motif;
    }

    public void setMotif(Integer motif) {
        this.motif = motif;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Double getMontant() {
        return montant;
    }

    public void setMontant(Double montant) {
        this.montant = montant;
    }

    public Integer getStatut() {
        return statut;
    }

    public void setStatut(Integer statut) {
        this.statut = statut;
    }

    public Etat getEtat() {
        return etat;
    }

    public void setEtat(Etat etat) {
        this.etat = etat;
    }   
    

    public Integer getActive() {
        return active;
    }

    public void setActive(Integer active) {
        this.active = active;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public String getSignature() {
        return signature;
    }

    public void setSignature(String signature) {
        this.signature = signature;
    }

    public Date getDateActivation() {
        return dateActivation;
    }

    public void setDateActivation(Date dateActivation) {
        this.dateActivation = dateActivation;
    }

    public Date getDateFermeture() {
        return dateFermeture;
    }

    public void setDateFermeture(Date dateFermeture) {
        this.dateFermeture = dateFermeture;
    }

    public Date getDateModification() {
        return dateModification;
    }

    public void setDateModification(Date dateModification) {
        this.dateModification = dateModification;
    }

    public Date getDateCreation() {
        return dateCreation;
    }

    public void setDateCreation(Date dateCreation) {
        this.dateCreation = dateCreation;
    }

    public List<Requete> getReclamations() {
        return reclamations;
    }

    public void setReclamations(List<Requete> reclamations) {
        this.reclamations = reclamations;
    }   

    public List<Document> getDocuments() {
        return documents;
    }

    public void setDocuments(List<Document> documents) {
        this.documents = documents;
    }
    
    
    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Requete)) {
            return false;
        }
        Requete other = (Requete) object;
        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "com.celylog.curam.model.entities.Requete[ id=" + id + " ]";
    }
    
}
