package com.celylog.curam.web.init;

import com.celylog.curam.config.*;
import com.celylog.curam.config.WebConfig;
import javax.servlet.Filter;
import javax.servlet.ServletContext;
import javax.servlet.ServletRegistration;
import org.springframework.security.web.session.HttpSessionEventPublisher;
import org.springframework.util.Assert;
import org.springframework.util.ObjectUtils;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.filter.DelegatingFilterProxy;
import org.springframework.web.multipart.support.MultipartFilter;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;




public class Initializer extends AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {
		return new Class<?>[] { HibernateConfig.class,SecurityConfig.class };
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {
		return new Class<?>[] { WebConfig.class };
	}

	@Override
	protected String[] getServletMappings() {
		return new String[] { "/" };
	}
	
	@Override
	protected Filter[] getServletFilters() {
		
		CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();
		characterEncodingFilter.setEncoding("UTF-8");
                
                DelegatingFilterProxy  delegatingFilterProxy=new DelegatingFilterProxy("springSecurityFilterChain");
                MultipartFilter  multipartFilter=new MultipartFilter();
                multipartFilter.setMultipartResolverBeanName("CommonsMultipartResolver");
                
		return new Filter[] { characterEncodingFilter,delegatingFilterProxy,multipartFilter};
	}
        
        @Override
        protected void registerDispatcherServlet(ServletContext servletContext) {
           // super.registerDispatcherServlet(servletContext);
            String servletName = this.getServletName();
		Assert.hasLength(servletName,
				"getServletName() may not return empty or null");

		WebApplicationContext servletAppContext = this.createServletApplicationContext();
		Assert.notNull(servletAppContext,
				"createServletApplicationContext() did not return an application " +
						"context for servlet [" + servletName + "]");

		CustomDispatcherServlet dispatcherServlet = new CustomDispatcherServlet(servletAppContext);

		ServletRegistration.Dynamic registration =
				servletContext.addServlet(servletName, dispatcherServlet);

		Assert.notNull(registration,
				"Failed to register servlet with name '" + servletName + "'." +
				"Check if there is another servlet registered under the same name.");

		registration.setLoadOnStartup(1);
		registration.addMapping(getServletMappings());
		registration.setAsyncSupported(isAsyncSupported());

		Filter[] filters = getServletFilters();
		if (!ObjectUtils.isEmpty(filters)) {
			for (Filter filter : filters) {
				registerServletFilter(servletContext, filter);
			}
		}

		this.customizeRegistration(registration);

            servletContext.addListener(new HttpSessionEventPublisher());

        }
}
