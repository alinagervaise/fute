/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.celylog.curam.web.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.util.logging.Logger;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
//import com.celylog.curam.model.entities.Documentation;

/**
 *
 * @author Nono Guy
 */
@Controller

public class FilesController {

    private static final int BUFFER_SIZE = 4096;
    private Logger logger = Logger.getLogger(this.getClass().getName());

    /**
     * Path of the file to be downloaded, relative to application's directory
     */
    private String filePath = "/downloads/ENSET.docx";

    /**
     * Method for handling file download request from client
     */
//    public ModelAndView upload(HttpServletRequest request,
//            HttpServletResponse response) throws Exception {
//
//        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
//        MultipartFile multipartFile = multipartRequest.getFile("file");
//
//        Documentation file = new Documentation();
////        file.setFilename(multipartFile.getOriginalFilename());
////        file.setNotes(ServletRequestUtils.getStringParameter(request, "notes"));
////        file.setType(multipartFile.getContentType());
////        file.setFile(multipartFile.getBytes());
//
////        this.filesService.save(file);
//        return new ModelAndView("redirect:files.htm");
//    }

    /**
     * download
     * @param request
     * @param fileName
     * @param response
     * @return 
     * @throws java.lang.Exception 
     */
//    @RequestMapping("/download.do")
    @RequestMapping(value = "/download.do/{fileName}")
    public ModelAndView download(HttpServletRequest request,
            @PathVariable("file_name") String fileName,
            HttpServletResponse response) throws Exception {
        // get absolute path of the application
        ServletContext context = request.getServletContext();
        String appPath = context.getRealPath("");
        System.out.println("appPath = " + appPath);
        
        // construct the complete absolute path of the file
        String fullPath = appPath + filePath;
//        String fullPath = appPath + filePath+fileName;
        File downloadFile = new File(fullPath);
        FileInputStream inputStream = new FileInputStream(downloadFile);

        // get MIME type of the file
        String mimeType = context.getMimeType(fullPath);
        if (mimeType == null) { 
            // set to binary type if MIME mapping not found
            mimeType = "application/octet-stream";
        }
        System.out.println("MIME type: " + mimeType);

        // set content attributes for the response
        response.setContentType(mimeType);
        response.setContentLength((int) downloadFile.length());

        // set headers for the response
        String headerKey = "Content-Disposition";
        String headerValue = String.format("attachment; filename=\"%s\"",
                downloadFile.getName());
        response.setHeader(headerKey, headerValue);

        // get output stream of the response
        OutputStream outStream = response.getOutputStream();

        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead = -1;

        // write bytes read from the input stream into the output stream
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outStream.write(buffer, 0, bytesRead);
        }

        inputStream.close();
        outStream.close();

        return null;

    }
}
